---
# https://access.redhat.com/articles/3626371#bgenerating-an-access-tokenb-4
#
# equivalent of curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=rhsm-api -d refresh_token=$api_offline_token
- name: Generating an access token
  uri:
    url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
    method: POST
    body_format: form-urlencoded
    return_content: true
    body:
      grant_type: "refresh_token"
      client_id: "rhsm-api"
      refresh_token: "{{ api_offline_token }}"
  register: temp_token
  until: temp_token is not failed
  retries: 15
  delay: 20

- name: Download aap.tar.gz
  get_url:
    url: "https://api.access.redhat.com/management/v1/images/{{ aap_bundle_sha_value }}/download"
    headers:
      accept: "application/json"
      Authorization: "Bearer {{ temp_token.json.access_token }}"
    dest: "/tmp/aap.tar.gz"
    checksum: "sha256: {{ aap_bundle_sha_value }}"
  register: download_aap_tarball
  until: download_aap_tarball is not failed
  retries: 15
  delay: 20

- name: create directory for automation controller
  file:
    path: "~/aap_install"
    state: directory
  register: aap_install_dir

- name: Extract aap tar.gz installer 
  unarchive:
    src: /tmp/aap.tar.gz
    dest: "~/aap_install/"
    remote_src: true
    extra_opts: ['--strip-components=1', '--show-stored-names']

- name: Set Installer Log location to generated_files location 
  ansible.builtin.lineinfile:
    path: ~/aap_install/setup.sh
    regexp: "{{ old_line }}"
    line: "{{ new_line }}"
  vars:
    old_line: LOG_FILE="${LOG_DIR}/setup-${TIMESTAMP}.log"
    new_line: LOG_FILE="generated_files/setup-${TIMESTAMP}.log"

- name: template inventory file for Ansible Controller Install
  template:
    src: "{{ install_strategy }}_controller_install.j2"
    dest: "~/aap_install/inventory"

- name: run the Automation Controller installer
  shell: "ANSIBLE_HOST_KEY_CHECKING=False ANSIBLE_BECOME_METHOD='sudo' ANSIBLE_BECOME=True ./setup.sh -e gpgcheck=0"
  args:
    chdir: "~/aap_install"
  async: 2700
  poll: 30

- name: wait for Automation Controller to be up
  uri:
    url: https://ansible.{{ top_level_domain }}/api/v2/ping/
    method: GET
    user: admin
    password: "{{ admin_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 10